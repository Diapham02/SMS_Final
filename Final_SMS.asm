.MODEL SMALL
.STACK 100H
.DATA

  ; DECLEAR INVENTORY ON ID, NAME, QUANTITY, PRICE, PRIORITY LEVEL
  INVENTORY_SIZE EQU 40
  INVENTORY DW 0,1,2,3,4,5,6,7,8,9
            DB "SNACK     ", "APPLE     ", "POTATOES  ", "TOMATOES  ", "ONIONS    ", "LEMONS    ", "MILK      ", "EGGS      ", "BREAD     ", "CHEESE    "
            DW 10, 15, 8, 20, 5, 12, 7, 3, 6, 9, 4, 7, 3, 1, 2, 7, 5, 2, 7, 9, 1, 0, 1, 1, 2, 0, 1, 2, 0, 1, '$'
    
  INVENTORY_ID_OFFSET DW 0
  INVENTORY_NAME_OFFSET DW 20
  INVENTORY_QUANTITY_OFFSET DW 120
  INVENTORY_PRICE_OFFSET DW 140
  SALES DW 0,0,0,0,0,0,0,0,0,0, '$' ; QUANTITY SOLD & TOTAL PRICE
  ITEM_PRICE DW 1, 2, 4, 6, 3, 2, 4, 1, 3, 1, '$'
  TOTAL_SALES DW 0  
                                  
  ;LOGIN FORM
  LOGIN_MESSAGE DB 'PLEASE ENTER YOUR USERNAME AND PASSWORD BELOW: ', '$'
  USERNAME_PROMPT DB 13,10, 'USERNAME: $'
  PASSWORD_PROMPT DB 13,10, 'PASSWORD: $'
  INPUT_USERNAME DB 20 DUP ('$')
  INPUT_PASSWORD DB 20 DUP ('$')
  USERNAME DB 'ADMIN', '$'
  PASSWORD DB '123', '$'
  INVALID_MESSAGE DB 13,10, 'INVALID USERNAME OR PASSWORD. PLEASE TRY AGAIN.', '$'
  VALID_MESSAGE DB 13,10, 'LOGIN SUCCESSFUL. WELCOME!', '$'
  
  ;FORMATTING
  CRLF DB 13,10,'$'
  SLINE DB 13,10, '----------------------------------------------' ,'$'
  DLINE DB 13,10, '==============================================' ,'$'
  DOTTED DB '**********************************************','$'

  ;MAIN MENU
  MENU DB 13, '----------<STORE MANAGEMENT SYSTEM>----------',13,10, '------------------MAIN MENU-----------------', 13, 10, 10 ,'1. VIEW INVENTORY',13,10,'2. RESTOCK ITEM',13,10,'3. SELL ITEMS',13,10, '4. SORT ITEMS',13,10,'5. SALES REPORT',13,10,'0. EXIT THE PROGRAM',13,10,'$'
  INVALID_INPUT DB 13,10,'INVALID INPUT. PLEASE TRY AGAIN.',13,10,'$'
  
  ;VIEW INVENTORY
  INVENTORY_HEADER DB 13,10, '----------<STORE MANAGEMENT SYSTEM>----------',13,10, '----------------<INVENTORY>-----------------',13,10,'ID',9,'NAME',9,9, 'QUANTITY',9, 'PRICE',13,10,'$'
  INVENTORY_LABEL DB '==============================================', 13, 10, 'ITEMS THAT NEEDS TO BE RESTOCK ARE DISPLAYED AS RED!', 13, 10, '==============================================', 13, 10, '1. BACK TO MAIN MENU', 13, 10,  '2. RESTOCK ITEMS', 13, 10, '3. SELL ITEMS', 13, 10 , 13, 10,'ENTER YOUR CHOICE: $'
  
  STOCK_AMOUNT DW ?
  STOCK_ID DW ?

  ; ADD ITEMS
  RESTOCK_LABEL DB '==============================================', 13, 10,9,9, 32,32,'RESTOCK ITEM', 13, 10, '==============================================', 13, 10, 'SELECT AN ITEM ID TO RESTOCK: $'
  RESTOCK_AMOUNT_LABEL DB 13, 10, 'ENTER THE AMOUNT TO RESTOCK (BETWEEN 1-9): $'
  RESTOCK_SUCCESS DB 13, 10, 'ITEM HAS BEEN RESTOCKED SUCCESSFULLY!', 13, 10, '$'
  ; SELL ITEMS 
  SELL_ITEM_ID_LABEL DB '==============================================', 13, 10,9,9, 32,32,'SELL ITEM', 13, 10, '==============================================', 13, 10,  'ENTER THE ITEM ID TO SELL: $'
  SELL_ITEM_AMOUNT_LABEL DB 13, 10, 'ENTER THE AMOUNT TO SELL (BETWEEN 1-9): $'
  SELL_ITEM_SUCCESS DB 13, 10, 'ITEM HAS BEEN SOLD SUCCESSFULLY!', 13, 10, '$'
  SELL_ITEM_FAIL DB 13, 10, 'ITEM CANNOT BE SOLD, NOT ENOUGH QUANTITY!', 13, 10, '$'

  ;CATEGORIZE INVENTORY
  SORT_INVENTORY_LABEL DB 13, '==============================================', 13, 10,9,'SORT INVENTORY BY STOCK COUNT', 13, 10, '==============================================', 13, 10, '1. BACK TO MAIN MENU', 13, 10, '2. IN STOCK', 13, 10, '3. LOW/OUT OF STOCK', 13, 10, 13, 10, 'ENTER YOUR CHOICE: $'
  LOW_STOCK_LABEL DB 13, 10, 'ITEMS ARE LOW ON STOCK!', 13, 10, '$'
  NO_STOCK_LABEL DB 13, 10, 'ITEMS ARE OUT OF STOCK!', 13, 10, '$'
  ON_STOCK_LABEL DB 13, 10, 'ITEMS ARE IN STOCK!', 13, 10, '$'
  
  ;SALES MADE
  SALES_HEADER DB 13,10, '-----------------------<STORE MANAGEMENT SYSTEM>--------------------',13,10, '----------------------------<SALES REPORT>-------------------------',13,10,'ID',9,'NAME',9,9, 'QUANTITY SOLD',9, 'PRICE/UNIT', 9, 'TOTAL EARNED',13,10,'$'
  SALES_LABEL DB '=================================================================', 13, 10, 9,9,32,32,9,'SALES OF THE DAY', 13, 10, '=================================================================', 13, 10, '1. BACK TO MAIN MENU', 13, 10, '0. EXIT THE PROGRAM', 13, 10 , 13, 10,'ENTER YOUR CHOICE: $'
  ;MISC
  USER_CHOICE DB 13, 10, 'ENTER YOUR CHOICE: $'
  USER_QUIT DB 13, 10, 'THANKS FOR USING THE PROGRAM. SEE YOU AGAIN.','$' 
      
  
  
.CODE
MAIN PROC 
  ;**********************************
  ;***********MAIN PROGRAM***********
  ;**********************************
  MOV AX, @DATA ; SET DATA SEGMENT
  MOV DS, AX ; SET DATA SEGMENT REGISTER     
  
  ;LOGIN FORM
  CALL LOGIN_FORM  
  
  ;MAIN LOOP
MAIN_LOOP:
  ;DISPLAY THE MENU
  CALL DRAW_MENU
  
  ;PROMPT USER TO ENTER CHOICE
  MOV AH, 01H ; READ CHARACTER
  INT 21H
  
  ;CHECK USER INPUT
  CMP AL, '1'
  JE VIEW_INVENTORY_INTERFACE
  
  CMP AL, '2'
  JE RESTOCK_INVENTORY_INTERFACE
  
  CMP AL, '3'
  JE SALES_INVENTORY_INTERFACE

  CMP AL, '4'
  JE SORT_INVENTORY_INTERFACE
  
  CMP AL, '5'
  JE SALES_REPORT_INTERFACE
  
  CMP AL, '0'
  JE EXIT_PROGRAM_INTERFACE

  JMP MAIN_LOOP

; *************    LOGIN FORM       *********      
LOGIN_FORM:
    
    MOV AH, 09H
    LEA DX, LOGIN_MESSAGE
    INT 21H

    ; INPUT USERNAME
    MOV AH, 09H
    LEA DX, USERNAME_PROMPT
    INT 21H

    MOV AH, 0AH
    LEA DX, INPUT_USERNAME
    INT 21H

    ; INPUT PASSWORD
    MOV AH, 09H
    LEA DX, PASSWORD_PROMPT
    INT 21H

    MOV AH, 0AH
    LEA DX, INPUT_PASSWORD
    INT 21H
    
    ; COMPARE USERNAME AND PASSWORD
MOV SI, OFFSET USERNAME
MOV DI, OFFSET INPUT_USERNAME
MOV CX, 20
CMP_LOOP_USER:
    CMPSB
    JNE INVALID_LOGIN
    LOOP CMP_LOOP_USER

MOV SI, OFFSET PASSWORD
MOV DI, OFFSET INPUT_PASSWORD
MOV CX, 20
CMP_LOOP_PASS:
    CMPSB
    JNE INVALID_LOGIN
    LOOP CMP_LOOP_PASS

; DISPLAY VALID MESSAGE
MOV AH, 09H
LEA DX, VALID_MESSAGE
INT 21H
JMP MAIN_LOOP       
RET

INVALID_LOGIN:
; DISPLAY INVALID MESSAGE
MOV AH, 09H
LEA DX, INVALID_MESSAGE
INT 21H

JMP MAIN_LOOP 

; ************* INTERFACE FUNCTIONS **********

  VIEW_INVENTORY_INTERFACE:
    CALL CLEAR_SCREEN
    CALL VIEW_INVENTORY
    CALL USER_NAVIGATE
    RET
  RESTOCK_INVENTORY_INTERFACE:
    CALL CLEAR_SCREEN
    CALL VIEW_INVENTORY
    CALL RESTOCK_INVENTORY
    RET
  SALES_INVENTORY_INTERFACE:
    CALL CLEAR_SCREEN
    CALL VIEW_INVENTORY
    CALL SALES_INVENTORY
    RET
  SORT_INVENTORY_INTERFACE:
    CALL SORT_INVENTORY
    CALL USER_NAVIGATE
    RET
  SALES_REPORT_INTERFACE:
    CALL SALES_REPORT
    CALL SALES_NAVIGATE
    RET
  EXIT_PROGRAM_INTERFACE:
    CALL CLEAR_SCREEN
    CALL EXIT_PROGRAM
    RET                 
    
; *********** SUBROUTINE ************

USER_NAVIGATE:
  ; CODE TO NAVIGATE USER
  LEA DX, INVENTORY_LABEL
  MOV AH, 09H
  INT 21H

  MOV AH, 01H;READ CHARACTER
  INT 21H

  CMP AL, '0'
  JE EXIT_PROGRAM_INTERFACE

  CMP AL, '1'
  JE MAIN_LOOP

  CMP AL, '2'
  JE RESTOCK_INVENTORY_INTERFACE
  
  CMP AL, '3'
  JE SALES_INVENTORY_INTERFACE
  
  JMP MAIN_LOOP
  RET  
  
SALES_NAVIGATE:
  LEA DX, SALES_LABEL
  MOV AH, 09H
  INT 21H

  MOV AH, 01H ; READ CHARACTER
  INT 21H

  CMP AL, '0'
  JE EXIT_PROGRAM_INTERFACE
  
  JMP MAIN_LOOP
  RET    
  
PRINT_INT:
  ; CONVERT THE WORD TO A STRING AND PRINT IT
  PUSH BX ; SAVE BX ON THE STACK
  MOV BX, 10 ; SET BX TO 10 (DIVISOR)
  XOR CX, CX ; CLEAR CX (COUNTER)
  CONVERT_LOOP:
    XOR DX, DX ; CLEAR THE HIGH BYTE OF DX
    DIV BX ; DIVIDE AX BY BX
    ADD DL, '0' ; CONVERT THE REMAINDER TO ASCII
    PUSH DX ; SAVE THE DIGIT ON THE STACK
    INC CX ; INCREMENT THE COUNTER
    CMP AX, 0 ; CHECK IF AX IS ZERO
    JNE CONVERT_LOOP ; IF NOT, REPEAT THE LOOP
  PRINT_LOOP2:
    POP DX ; GET THE NEXT DIGIT FROM THE STACK
    MOV AH, 02 ; WRITE CHARACTER
    INT 21H ; PRINT THE DIGIT
    DEC CX ; DECREMENT THE COUNTER
    CMP CX, 0 ; CHECK IF ALL DIGITS HAVE BEEN PRINTED
    JNE PRINT_LOOP2 ; IF NOT, REPEAT THE LOOP
    POP BX ; RESTORE BX FROM THE STACK
    RET

CHECK_INT:
  ; CHECK IF THE WORD IS LESS THAN OR EQUAL TO 5
  MOV BX, AX
  CMP BX, 5
  JLE PRINT_RED_COLOR
  RET

PRINT_STRING:
  ; PRINT A STRING OF CHARACTERS
  ; INPUT: CX = LENGTH OF STRING, DX = OFFSET OF STRING
  PUSH AX ; SAVE REGISTERS
  PUSH BX
  PUSH CX
  MOV BX, DX ; SET BX TO THE OFFSET OF THE STRING
  MOV CX, 10 ; SET THE LENGTH TO 10 CHARACTERS
  
  PRINT_LOOP:
  MOV DL, [BX] ; LOAD CHARACTER FROM MEMORY
  INT 21H ; OUTPUT THE CHARACTER
  INC BX ; INCREMENT OFFSET TO NEXT CHARACTER
  LOOP PRINT_LOOP ; REPEAT UNTIL 10 CHARACTERS ARE PRINTED
  
  PRINT_DONE:
  POP CX ; RESTORE REGISTERS
  POP BX
  POP AX
  RET

PRINT_RED_COLOR:
  ; PRINT A STRING OF CHARACTERS
  ; INPUT: CX = LENGTH OF STRING, DX = OFFSET OF STRING
  PUSH AX ; SAVE REGISTERS
  PUSH BX
  PUSH CX
  MOV BX, DX ; SET BX TO THE OFFSET OF THE STRING
  MOV CX, 10 ; SET THE LENGTH TO 10 CHARACTERS 
  
  PRINT_LOOP3:
    MOV DL, [BX] ; LOAD CHARACTER FROM MEMORY
    MOV AH, 09H
    MOV AL, DL 
    MOV BL, 04H ; SET BACKGROUND COLOR TO BLACK WITH BLINK
    OR BL, 80H
    INT 10H
    INC BX ; INCREMENT OFFSET TO NEXT CHARACTER
    LOOP PRINT_LOOP3 ; REPEAT UNTIL 10 CHARACTERS ARE PRINTED
  PRINT_DONE3:
  POP CX ; RESTORE REGISTERS
  POP BX
  POP AX
  RET


; **************MENU FUNCTIONS **************

DRAW_MENU:
  ; CODE TO DRAW MENU
  CALL CLEAR_SCREEN
  LEA DX, MENU
  MOV AH, 09H
  INT 21H
  
  LEA DX, USER_CHOICE
  MOV AH, 09H
  INT 21H
  RET

VIEW_INVENTORY:
  ;CODE TO VIEW INVENTORY 
  MOV DX, OFFSET INVENTORY_HEADER
  MOV AH, 09
  INT 21H
  
  MOV BP, 0
  LEA SI, INVENTORY

  LOOP_START:    
  
    MOV AX, [SI] ; LOAD INVENTORY ID INTO AX
    CMP AX, 10 ; CHECK IF END OF ARRAY
    JA DONE 
    CALL PRINT_INT ; PRINT THE INTEGER

    CALL PRINT_TAB

    MOV DX, OFFSET INVENTORY + 20 ; LOAD INVENTORY NAME INTO DX     
    
    ADD DX, BP ; ADD BP TO DX TO POINT TO THE NEXT WORD  
    
    CALL PRINT_STRING ; PRINT THE STRING   
    
    MOV AX, [SI + 120] ; LOAD INVENTORY STOCK INTO AX 
    
    CALL CHECK_INT ; CHECK IF STOCK IS LESS THAN OR EQUAL TO 5  
    
    CALL PRINT_TAB
    
    MOV AX, [SI + 120]  
    
    CALL PRINT_INT

    CALL PRINT_DOUBLE_TAB
    
    MOV AX, [SI + 140]
    
    CALL PRINT_INT
    
    ADD BP, 10
    ADD SI, 2 ; INCREMENT SI TO POINT TO THE NEXT WORD     
    
    CALL PRINT_NEWLINE_RETURN
    JMP LOOP_START ; REPEAT THE LOOP FOR THE NEXT ELEMENT
  DONE:
  RET

RESTOCK_INVENTORY:
  ; CODE TO RESTOCK ITEM
  LEA DX, RESTOCK_LABEL
  MOV AH, 09H
  INT 21H 

  MOV AH, 01
  INT 21H

  SUB AL, 30H 
  ADD AL, AL
  SUB AX, 136
  MOV STOCK_ID, AX 

  LEA DX, RESTOCK_AMOUNT_LABEL
  MOV AH, 09H 
  INT 21H

  MOV AH, 01
  INT 21H
  SUB AL, 30H
  SUB AX, 256
  MOV CX, AX

  LEA SI, INVENTORY
  ADD SI, STOCK_ID
  ADD CX, [SI]
  MOV WORD PTR [SI], CX 
  
  CALL CLEAR_SCREEN
  CALL PRINT_NEWLINE
  CALL PRINT_ASTERISK
  LEA DX, RESTOCK_SUCCESS
  MOV AH, 09H 
  INT 21H 
  CALL PRINT_ASTERISK
  CALL PRINT_NEWLINE
  CALL VIEW_INVENTORY
  CALL USER_NAVIGATE
  RET

SALES_INVENTORY:
  ; CODE TO RESTOCK ITEM
  LEA DX, SELL_ITEM_ID_LABEL
  MOV AH, 09H
  INT 21H 

  MOV AH, 01
  INT 21H

  SUB AL, 30H ; CONVERT TO INTEGER
  ADD AL, AL ; MULTIPLY BY 2
  SUB AX, 136 ; SUBTRACT 136 TO GET THE OFFSET
  MOV STOCK_ID, AX 

  LEA DX, SELL_ITEM_AMOUNT_LABEL
  MOV AH, 09H 
  INT 21H

  MOV AH, 01
  INT 21H
  SUB AL, 30H
  SUB AX, 256
  MOV CX, AX

  LEA SI, INVENTORY
  ADD SI, STOCK_ID
  MOV BX, [SI] ; LOAD STOCK INTO BX
  SUB BX, CX
  CMP BX, 0
  JS RESET_QUANTITY

  MOV WORD PTR [SI], BX
  JMP SOLD_QUANTITY

  RESET_QUANTITY: 
    MOV BX, [SI]
    MOV WORD PTR [SI], BX
    CALL CLEAR_SCREEN
    CALL PRINT_NEWLINE
    CALL PRINT_ASTERISK
    LEA DX, SELL_ITEM_FAIL
    MOV AH, 09H 
    INT 21H 
    CALL PRINT_ASTERISK
    CALL PRINT_NEWLINE
    CALL VIEW_INVENTORY
    CALL USER_NAVIGATE
    RET 
  
  SOLD_QUANTITY:
    CALL SALES_DONE
    CALL CLEAR_SCREEN
    CALL PRINT_NEWLINE
    CALL PRINT_ASTERISK
    LEA DX, SELL_ITEM_SUCCESS
    MOV AH, 09H 
    INT 21H 
    CALL PRINT_ASTERISK
    CALL PRINT_NEWLINE
    CALL VIEW_INVENTORY
    CALL USER_NAVIGATE
    RET 
    
  SALES_DONE: 
    MOV AX, STOCK_ID 
    SUB AX, 120 
    MOV STOCK_ID, AX
    LEA SI, SALES 
    ADD SI, STOCK_ID
    MOV AX, [SI]
    ADD CX, AX 
    MOV WORD PTR [SI], CX
    RET
  RET

SORT_INVENTORY:
  ; CODE TO SEARCH ITEM
  CALL CLEAR_SCREEN
  LEA DX, SORT_INVENTORY_LABEL
  MOV AH, 09H 
  INT 21H 
  
  MOV AH, 01H 
  INT 21H 
  
  CMP AL, '1'
  CALL MAIN_LOOP 
  
  CMP AL, '2'
  JE IN_STOCK_PROMPT
  
  CMP AL, '3' 
  JE LOW_IN_STOCK_PROMPT 
  
  RET

IN_STOCK_PROMPT:
  CALL CLEAR_SCREEN
  MOV DX, OFFSET INVENTORY_HEADER
  MOV AH, 09
  INT 21H
  
  MOV BP, 0
  LEA SI, INVENTORY

  LOOP_START2:
    MOV AX, [SI] 
    CMP AX, 10 
    JA END2

    MOV AX, [SI + 120] ; LOAD INVENTORY ID INTO AX
    CMP AX, 6 ; CHECK IF END OF ARRAY
    JL DONE2 

    MOV AX, [SI]
    CALL PRINT_INT ; PRINT THE INTEGER

    CALL PRINT_TAB

    MOV DX, OFFSET INVENTORY + 20 ; LOAD INVENTORY NAME INTO DX
    ADD DX, BP ; ADD BP TO DX TO POINT TO THE NEXT WORD
    CALL PRINT_STRING ; PRINT THE STRING
    MOV AX, [SI + 120] ; LOAD INVENTORY STOCK INTO AX
    CALL CHECK_INT ; CHECK IF STOCK IS LESS THAN OR EQUAL TO 5

    CALL PRINT_TAB
    
    MOV AX, [SI + 120] 
    CALL PRINT_INT

    CALL PRINT_DOUBLE_TAB
    
    MOV AX, [SI + 140]
    CALL PRINT_INT
    CALL PRINT_NEWLINE

    ADD BP, 10
    ADD SI, 2 ; INCREMENT SI TO POINT TO THE NEXT WORD
    JMP LOOP_START2 ; REPEAT THE LOOP FOR THE NEXT ELEMENT
  
  DONE2:
    ADD BP, 10
    ADD SI, 2
    JMP LOOP_START2
    RET 
  END2:
    RET
  RET

LOW_IN_STOCK_PROMPT:
  CALL CLEAR_SCREEN
  MOV DX, OFFSET INVENTORY_HEADER
  MOV AH, 09
  INT 21H
  
  MOV BP, 0
  LEA SI, INVENTORY

  LOOP_START3:
    MOV AX, [SI] 
    CMP AX, 10 
    JA END3

    MOV AX, [SI + 120] ; LOAD INVENTORY ID INTO AX
    CMP AX, 5 ; CHECK IF END OF ARRAY
    JG DONE3

    MOV AX, [SI]
    CALL PRINT_INT ; PRINT THE INTEGER

    CALL PRINT_TAB

    MOV DX, OFFSET INVENTORY + 20 ; LOAD INVENTORY NAME INTO DX
    ADD DX, BP ; ADD BP TO DX TO POINT TO THE NEXT WORD
    CALL PRINT_STRING ; PRINT THE STRING
    MOV AX, [SI + 120] ; LOAD INVENTORY STOCK INTO AX
    CALL CHECK_INT ; CHECK IF STOCK IS LESS THAN OR EQUAL TO 5

    CALL PRINT_TAB
    
    MOV AX, [SI + 120] 
    CALL PRINT_INT

    CALL PRINT_DOUBLE_TAB
    
    MOV AX, [SI + 140]
    CALL PRINT_INT
    CALL PRINT_NEWLINE

    ADD BP, 10
    ADD SI, 2 ; INCREMENT SI TO POINT TO THE NEXT WORD
    JMP LOOP_START3 ; REPEAT THE LOOP FOR THE NEXT ELEMENT
  DONE3:
    ADD BP, 10
    ADD SI, 2
    JMP LOOP_START3
    RET 
  END3:
    RET
  RET 


SALES_REPORT:
  CALL CLEAR_SCREEN
  ; CODE TO GENERATE SALES REPORTS
  MOV DX, OFFSET SALES_HEADER
  MOV AH, 09
  INT 21H

  MOV BP, 0
  LEA SI, INVENTORY
  MOV BX, OFFSET SALES 
  MOV DI, OFFSET ITEM_PRICE 

  LOOP_START5:
    MOV AX, [SI] ; LOAD INVENTORY ID INTO AX
    CMP AX, 10 ; CHECK IF END OF ARRAY
    JA DONE5 
    CALL PRINT_INT ; PRINT THE INTEGER

    CALL PRINT_TAB

    MOV DX, OFFSET INVENTORY + 20 ; LOAD INVENTORY NAME INTO DX
    ADD DX, BP ; ADD BP TO DX TO POINT TO THE NEXT WORD
    CALL PRINT_STRING ; PRINT THE STRING

    CALL PRINT_TAB

    MOV AX, [BX]
    CALL PRINT_INT

    CALL PRINT_DOUBLE_TAB
  
    MOV AX, [SI + 140]
    CALL PRINT_INT
  
    CALL PRINT_DOUBLE_TAB

    MOV CX, [BX]
    MOV AX, [DI]
    MUL CX
    CALL PRINT_INT

    CALL PRINT_NEWLINE

    ADD BP, 10
    ADD SI, 2 ; INCREMENT SI TO POINT TO THE NEXT WORD
    ADD BX, 2 
    ADD DI, 2
    JMP LOOP_START5 ; REPEAT THE LOOP FOR THE NEXT ELEMENT
  DONE5:
    RET  ; RETURN FROM THE FUNCTION

;************* HELPER FUNCTIONS ***************

EXIT_PROGRAM:
  ; CODE TO EXIT PROGRAM
  CALL DRAW_LINE

  LEA DX, USER_QUIT
  MOV AH, 09H
  INT 21H 
  
  CALL DRAW_LINE

  MOV AH, 4CH
  INT 21H

CLEAR_SCREEN:
  ; FUNCTION TO CLEAR THE SCREEN
  MOV AH, 06H
  MOV AL, 0
  MOV BH, 07H
  MOV CX, 0
  MOV DX, 184FH
  INT 10H
  RET

DRAW_LINE:
  ; FUNCTION TO DRAW A LINE
  LEA DX, SLINE
  MOV AH, 09H
  INT 21H
  RET

PRINT_TAB:
  MOV DL, 09
  MOV AH, 02
  INT 21H
  RET

PRINT_DOUBLE_TAB:
  MOV DL, 09
  MOV AH, 02
  INT 21H

  MOV DL, 09
  MOV AH, 02
  INT 21H
  RET

PRINT_NEWLINE:
  MOV DL, 0AH
  MOV AH, 02
  INT 21H
  RET  
  
PRINT_NEWLINE_RETURN:
  MOV DL, 0DH ; ASCII CODE OF CARRIAGE RETURN (CR)
  MOV AH, 02H ; USE DOS FUNCTION TO PRINT CHARACTER
  INT 21H

  MOV DL, 0AH ; ASCII CODE OF LINE FEED (LF)
  MOV AH, 02H ; USE DOS FUNCTION TO PRINT CHARACTER
  INT 21H

  RET  
  
PRINT_ASTERISK:
  LEA DX, DOTTED
  MOV AH, 09H 
  INT 21H 
  RET

MAIN ENDP
END MAIN